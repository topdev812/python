Вывод сообщения:                                                                       print('Hello, World!')
Комментарий:                                                                           # You know nothing, Jon Snow!
Инструкция (statement) — команда для компьютера, написанная на языке программирования: print('Mother of Dragons.') 
Код на python — это набор инструкций, разделенных (чаще всего) переводом строки:       print('Robert')
                                                                                       print('Stannis')
                                                                                       print('Renly')
Арифметические операции:                                                               
- — вычитание
* — умножение
** — возведение в степень
/ — деление
// — целочисленное деление
% — остаток от деления

Логические операции:
< — меньше
<= — меньше или равно
> — больше
>= — больше или равно
== — равно
!= — не равно

Вывод строки (с кавычками и апострофами):                                              print("Dracarys!")
                                                                                       print('Dracarys!')
                                                                                       print("Dragon's mother")
                                                                                       print("Dragon's mother said \"No\"")
                                                                                       print("\"Khal Drogo's favorite word is \"athjahakar\"\"")
                                                                                       print('"Khal Drogo\'s favorite word is \"athjahakar""')
Символ экранирования: \. Если поставить \ перед кавычкой (одинарной или двойной), это скажет интерпретатору о том, что кавычку нужно рассматривать не как начало или конец строки,
а как часть строки. \n - это пример экранированной последовательности (escape sequence). Их еще называют управляющими конструкциями.к таким символам относятся табуляция \t 
(разрыв, получаемый при нажатии на кнопку Tab) и возврат каретки \r (только в Windows). Распознать управляющую конструкцию в тексте проще всего по символу \. 
                                                                                       print("- Did Joffrey agree?\n- He did. He also said \"I love using \\n\".")
                                                                                       print('- Did Joffrey agree?\n- He did. He also said "I love using \\n".')
Конкатенация — операция соединения двух строк:                                         print("King's " + ' Landing'):
                                                                                       print("Winter " + 'came' + " for " + 'the ' + "House" + ' of ' + "Frey.")
Кодировка — набор символов, закодированных с помощью чисел для представления текста в электронном виде:
                                                                                       print(chr(126))
                                                                                       print(chr(94))
                                                                                       print(chr(37))
Явное преобразование типа производят функции str и int. Функция str приводит значение к строке, а функция int — к числу:
                                                                                       print(str(5))
                                                                                       print(int('345'))
Интерполяция - способ получения сложной строки из нескольких простых с использованием специальных шаблонов:
                                                                                       first_name = 'Joffrey'
                                                                                       greeting = 'Hello'
                                                                                       template = "{}, {}!"
                                                                                       print(template.format(greeting, first_name))
                                                                                       print("Do you want to eat, {}?".format('Arya'))
Собираем слово из букв трех строковых переменных:                                      one = 'Naharis'
                                                                                       two = 'Mormont'
                                                                                       three = 'Sand'
                                                                                       print('{}{}{}{}{}'.format(one[2], two[1], three[3], two[4], two[2]))
Multi-line строки. Для того, чтобы описать такую “многострочную строку”, нужно заключить её в тройные кавычки - """ или ''':
                                                                                       text = '''Lannister, Targaryen, Baratheon, Stark, Tyrell...
                                                                                       they're all just spokes on a wheel.
                                                                                       This one's on top, then that one's on top, and on and on it spins,
                                                                                       crushing those on the ground.'''
                                                                                       print(text)
Определение и вызов функции:                                                           def show_date(month, day):
                                                                                          print('Today is: {} {}'.format(month, day))

                                                                                       show_date('January', '29')
                                                                                       
Пример повторения строк (первый аргумент строка которую нужно повторить, второй - количество паз):
                                                                                       print('=-' * 4)
Пример работы функции с возвратом значения:                                            def sub(a, b):
                                                                                          result = a - b
                                                                                          return result

                                                                                       print(sub(10, 7))
None - это тоже самое что Null
Функция возвращает дату по шаблону с заполнением нулей:                                def get_formatted_birthday(day, mounth, year):
                                                                                          result = '%02d-%02d-%04d' % (day, mounth, year)
                                                                                          return result

Хороший стиль программирования:
Всегда отбивайте арифметические операторы пробелами от самих чисел (операндов):        print(81 / 9)
Оформление арифметической операции:                                                    print(6 - -81) или для понятности (6 - (-81))
                                                                                       print(((8 / 2) + 5) - (-3 / 2))
Константы принято именовать буквами в верхнем регистре с _ в качестве разделителя:     DRAGONS_BORN_COUNT = 3                                                                                  
                                                                                       
Стандарты оформления кода:                                                             https://www.python.org/dev/peps/pep-0008/
Линетр (помощник проверки кода на соблюдения стандартов по оформлению):                https://flake8.pycqa.org/en/latest/
Список всех правл хорошего кода:                                                       https://lintlyci.github.io/Flake8Rules/
Компилятор:                                                                            https://repl.it/languages/python3
Официальная документации с описанием функций:                                          https://docs.python.org/3/library/
Неофициальная документации с описанием функций:                                        https://pythoner.name/documentation
Справочник стандартных функций:                                                        https://pythoner.name/documentation/library/functions

Дополнительная информация:
Арифметическая операция — сложение, вычитание, умножение и деление.
Оператор — специальный символ, создающий операцию. Например, + создает операцию сложения.
Операнд — объект, который участвует в операции. 3 * 6: здесь 3 и 6 — операнды.
Унарная операция — операция с одним операндом. Например, -3 — унарная операция для получения числа, противоположного числу три.
Бинарная операция — операция с двумя операндами. Например, 3 + 9. И тернарная соответственно.
Коммутативность — свойство операции, когда изменения порядка операндов не влияет на результат. Например, сложение — коммутативная операция: от перемены мест слагаемых сумма не 
меняется.
Конкатенация — операция соединения двух строк. Например, print("King's " + ' Landing')
Функция — операция, способная принимать данные и возвращать результат.
Аргумент — информация, которую функция получает при вызове.
Сигнатура функции — формальное описание типов аргументов и типа возвращаемого значения функции.
Побочный эффект — действие, которое изменяет внешнее окружение.
Предикат — выражение, отвечающее на вопрос «да» или «нет» с помощью типа bool. Предикат отвечает на утвердительный вопрос «да» или «нет», возвращая значение типа bool.
Предикаты во всех языках принято именовать особым образом для простоты анализа. В Python предикаты, как правило, начинаются с префикса is или has:
  is_infant — «младенец ли?»
  has_children — «есть ли дети?»
  is_empty — «пустой ли?»
  has_errors — «есть ли ошибки?»
Функция может считаться предикатом, только если она возвращает bool.
